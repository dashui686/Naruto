import { PropType } from 'vue-demi';
import './styles';
declare const _default: import("vue-demi").DefineComponent<{
    highlight: {
        type: BooleanConstructor;
        default: boolean;
    };
    oldString: {
        type: StringConstructor;
        default: string;
    };
    newString: {
        type: StringConstructor;
        default: string;
    };
    context: {
        type: NumberConstructor;
        default: number;
    };
    outputFormat: {
        type: PropType<"line-by-line" | "side-by-side">;
        default: string;
    };
    drawFileList: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderNothingWhenEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    diffStyle: {
        type: PropType<"word" | "char">;
        default: string;
    };
    fileName: {
        type: StringConstructor;
        default: string;
    };
    isShowNoChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    trim: {
        type: BooleanConstructor;
        default: boolean;
    };
    language: {
        type: StringConstructor;
        default: string;
    };
    noDiffLineFeed: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    html: import("vue-demi").Ref<string>;
}, unknown, {}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, ("before-render" | "after-render")[], "before-render" | "after-render", import("vue-demi").VNodeProps & import("vue-demi").AllowedComponentProps & import("vue-demi").ComponentCustomProps, Readonly<import("vue-demi").ExtractPropTypes<{
    highlight: {
        type: BooleanConstructor;
        default: boolean;
    };
    oldString: {
        type: StringConstructor;
        default: string;
    };
    newString: {
        type: StringConstructor;
        default: string;
    };
    context: {
        type: NumberConstructor;
        default: number;
    };
    outputFormat: {
        type: PropType<"line-by-line" | "side-by-side">;
        default: string;
    };
    drawFileList: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderNothingWhenEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    diffStyle: {
        type: PropType<"word" | "char">;
        default: string;
    };
    fileName: {
        type: StringConstructor;
        default: string;
    };
    isShowNoChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    trim: {
        type: BooleanConstructor;
        default: boolean;
    };
    language: {
        type: StringConstructor;
        default: string;
    };
    noDiffLineFeed: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onBefore-render"?: ((...args: any[]) => any) | undefined;
    "onAfter-render"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
    highlight: boolean;
    oldString: string;
    newString: string;
    context: number;
    outputFormat: "line-by-line" | "side-by-side";
    drawFileList: boolean;
    renderNothingWhenEmpty: boolean;
    diffStyle: "word" | "char";
    fileName: string;
    isShowNoChange: boolean;
    language: string;
    noDiffLineFeed: boolean;
}>;
export default _default;
